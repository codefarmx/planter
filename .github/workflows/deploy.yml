name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant Gradle execute permission
        run: chmod +x gradlew

      - name: Build JAR with Gradle
        run: ./gradlew clean build -x test

      - name: Verify built artifacts exist
        run: |
          test -f Dockerfile
          test -f scripts/start-app.sh
          ls -l build/libs/*.jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Retrieve EC2 IP and RDS Endpoint from Secrets Manager
        id: fetch_secrets
        run: |
          export EC2_PUBLIC_IP=$(aws secretsmanager get-secret-value \
            --secret-id planter/ec2_public_ip \
            --query SecretString --output text)

          export RDS_ENDPOINT=$(aws secretsmanager get-secret-value \
            --secret-id planter/rds_endpoint \
            --query SecretString --output text)

          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get JAR filename
        run: |
          JAR_FILE=$(ls build/libs/*-SNAPSHOT.jar | grep -v plain)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
          echo "Checking for $JAR_FILE"
          ls -lh "$JAR_FILE"

      - name: Copy JAR, Dockerfile, and start script to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "${{ env.JAR_FILE }},Dockerfile,scripts/start-app.sh"
          target: "~/app"

      - name: Bootstrap Nginx with project domain
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          working-directory: ~/nginx-proxy
          script: ./bootstrap.sh farmify.app codeacademyx@gmail.com

      - name: SSH and start Spring app on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export DB_URL="jdbc:postgresql://${{ env.RDS_ENDPOINT }}/planterdb"
            export DB_USERNAME=planteradmin
            export DB_PASSWORD="${{ secrets.PLANTER_DB_PASSWORD }}"
            export PROJECT_NAME=planter
            chmod +x ~/app/scripts/start-app.sh
            ~/app/scripts/start-app.sh
