name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant Gradle execute permission
        run: chmod +x gradlew

      - name: Build JAR with Gradle
        run: ./gradlew clean build -x test

      - name: Verify built artifacts exist
        run: |
          test -f Dockerfile
          test -f scripts/start-app.sh
          ls -l build/libs/*.jar

      - name: Retrieve GitHub Role ARN from Secrets Manager
        id: get_role
        run: |
          ROLE_ARN=$(aws secretsmanager get-secret-value --secret-id planter/github_role_arn --query SecretString --output text)
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve deployment secrets from AWS Secrets Manager
        id: fetch_secrets
        run: |
          echo "EC2_INSTANCE_ID=$(aws secretsmanager get-secret-value --secret-id planter/ec2_instance_id --query SecretString --output text)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(aws secretsmanager get-secret-value --secret-id planter/rds_endpoint --query SecretString --output text)" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=$(aws secretsmanager get-secret-value --secret-id planter/deployment_bucket --query SecretString --output text)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(aws secretsmanager get-secret-value --secret-id planter/db_password --query SecretString --output text)" >> $GITHUB_ENV

      - name: Get JAR filename
        run: |
          JAR_FILE=$(ls build/libs/*-SNAPSHOT.jar | grep -v plain)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
          echo "Checking for $JAR_FILE"
          ls -lh "$JAR_FILE"

      - name: Upload deployment artifacts to S3
        run: |
          aws s3 cp "$JAR_FILE" s3://$DEPLOYMENT_BUCKET/deployments/app.jar
          aws s3 cp Dockerfile s3://$DEPLOYMENT_BUCKET/deployments/Dockerfile
          aws s3 cp scripts/start-app.sh s3://$DEPLOYMENT_BUCKET/deployments/start-app.sh

      - name: Run remote deployment via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$EC2_INSTANCE_ID" \
            --comment "Deploy planter app" \
            --parameters commands="[
              \"mkdir -p ~/app\",
              \"aws s3 cp s3://$DEPLOYMENT_BUCKET/deployments/app.jar ~/app/app.jar\",
              \"aws s3 cp s3://$DEPLOYMENT_BUCKET/deployments/Dockerfile ~/app/Dockerfile\",
              \"aws s3 cp s3://$DEPLOYMENT_BUCKET/deployments/start-app.sh ~/app/start-app.sh\",
              \"chmod +x ~/app/start-app.sh\",
              \"export DB_URL=jdbc:postgresql://$RDS_ENDPOINT/planterdb\",
              \"export DB_USERNAME=planteradmin\",
              \"export DB_PASSWORD=$DB_PASSWORD\",
              \"export PROJECT_NAME=planter\",
              \"~/app/start-app.sh\"
            ]" \
            --region $AWS_REGION \
            --output text
